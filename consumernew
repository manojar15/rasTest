package rastest

import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._

object PartitionedAvroEventConsumerBatch {
  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder()
      .appName("Partitioned Avro Event Consumer (Batch)")
      .master("local[*]")
      .getOrCreate()

    val avroInputBase = "C:/Users/e5655076/RAS_RPT/obrandrastest/customer/avro_output"
    val baseOutputPath = "C:/Users/e5655076/RAS_RPT/obrandrastest/customer/tenant_data"

    val dfModified = spark.read.format("avro").load(s"$avroInputBase/modified")
    val dfNew      = spark.read.format("avro").load(s"$avroInputBase/new")
    val avroDF     = dfModified.unionByName(dfNew)

    val parsed = avroDF.select(
      col("partition_id"),
      col("tenant_id"),
      col("customer_id"),
      col("event_timestamp"),
      col("logical_date"),
      col("event_type"),
      col("payload_bytes").as("payload")
    )

    parsed.write
      .mode("overwrite")
      .partitionBy("tenant_id", "partition_id", "logical_date")
      .format("parquet")
      .save(baseOutputPath)

    println(s"âœ… Avro events processed to Parquet partitions at $baseOutputPath")

    spark.stop()
  }
}
